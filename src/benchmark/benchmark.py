# -*- coding: utf-8 -*-
#
# Written by Matthieu Sarkis, https://github.com/MatthieuSarkis
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

from argparse import ArgumentParser
import tensorflow as tf
import matplotlib.pyplot as plt
import tensorflow as tf
import json
import glob
import numpy as np
import os

from src.statphy.models.percolation import generate_data

#X, _, _ = generate_data(L=128, 
#                        p_arr=[0.5928],
#                        max_configs_per_p=1000)

def load_synthetic_config(synthetic_data_path='data/generated'):
    """
        Read the .npy files generated by the GAN. Each file corresponds
        to a spin configuration. 
        
        Output: numpy array of shape (n_configs, image_size, image_size)
                ready to by an input of the CNN.
    """
    
    list_generated_configs = glob.glob(os.path.join(synthetic_data_path, '*.npy'))
    synthetic_configs = []

    for file in list_generated_configs:
        synthetic_configs.append(np.load(file).reshape(128, 128))
    synthetic_configs = np.array(synthetic_configs)
    
    return synthetic_configs

def main(args):

    model = tf.keras.models.load_model(args.CNN_model_path)

    with open("saved_models/CNN_L128_N10000/labels.json", 'r') as f:
        labels = json.load(f)

    reversed_labels = {value : float(key) for (key, value) in labels.items()}

    X = load_synthetic_config(args.synthetic_data_dir)
    y_pred = model.predict(X).argmax(axis=1)
    y_pred = [reversed_labels[i] for i in y_pred]

    plt.hist(y_pred)
    plt.title("Distribution of the value of p for GAN generated critical configurations")
    if not os.path.exists('saved_files'):
        os.makedirs('saved_files')
    plt.savefig('saved_files/hist_GANgenerated_configs.png')
    
if __name__ == "__main__":
    
    parser = ArgumentParser()

    parser.add_argument("--synthetic_data_dir", type=str, default="./data/generated/")
    parser.add_argument("--CNN_model_path", type=str, default="./saved_models/CNN_L128_N10000/saved-model.h5")
    parser.add_argument("--noise_dim", type=int, default=100)

    args = parser.parse_args()
    main(args)

